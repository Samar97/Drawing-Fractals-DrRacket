#lang racket

(require plot)
(plot-new-window? #t)
(plot-width 900)
(plot-height 900)
(define (draw curve)
(plot (parametric
(lambda (t) (vector (x-of (curve t)) (y-of (curve t))))
0 1 #:width 1 #:samples 20000
#:x-min -5 #:x-max 5
#:y-min -5 #:y-max 5)))

(define (compose f g)
(lambda (x)
  (f (g x))))

(define (identity x) x)

(define (repeated f n)
  (if (= n 0) identity
      (compose f (repeated f (- n 1)))))

(define (make-point x y)
  (lambda (bit)
    (if (zero? bit) x y)))

(define (x-of point)
  (point 0))

(define (y-of point)
  (point 1))

(define (unit-circle)
(lambda (t) (make-point (sin (* 2 pi t)) (cos (* 2 pi t)))))

(define (unit-semi-circle)
(lambda (t) (make-point (sin (* pi t)) (cos (* pi t)))))

(define (unit-line-at y)
  (lambda (t) (make-point t y)))

(define (unit-line) (unit-line-at 0))

(define (vertical-line p l)
  (lambda(t) (make-point (p 0) (+ (p 1) (* l t)))))

(define (rotate-pi/2 curve)
  (lambda(t) (let* ((ct (curve t)))
    (make-point (- (y-of ct)) (x-of ct)))))

(define (reflect-through-y-axis curve)
  (lambda(t) (let* ((ct (curve t)))
    (make-point (- (x-of ct)) (y-of ct)))))

(define (translate x y curve)
  (lambda(t) (let* ((ct (curve t)))
    (make-point (+ x (x-of ct)) (+ y (y-of ct))))))

(define (scale x y curve)
  (lambda(t) (let* ((ct (curve t)))
    (make-point (* x (x-of ct)) (* y (y-of ct))))))

(define (rotate-around-origin radians curve)
  (lambda(t) (let* ((ct (curve t))
                    (xold (x-of ct))
                    (yold (y-of ct)))
    (make-point (- (* xold (cos radians)) (* yold (sin radians))) (+ (* yold (cos radians)) (* xold (sin radians)))))))

(define (put-in-standard-position curve)
   (let*([ct curve]
         [ctrans (translate (- (x-of (curve 0))) (- (y-of (curve 0))) ct)]
         [ydiff (y-of (ctrans 1))]
         [xdiff (x-of (ctrans 1))]
         [ang (atan ydiff xdiff)]
         [crot (rotate-around-origin (- ang) ctrans)]
         [mag (/ 1 (x-of (crot 1)))]
         [cfinal (scale mag mag crot)])
     cfinal))

(define (connect-rigidly curve1 curve2)
  (lambda (t)
    (if (< t (/ 1 2)) (curve1 (* 2 t))
        (curve2 (- (* 2 t) 1)))))

(define (connect-ends curve1 curve2)
  (connect-rigidly curve1 (translate (x-of (curve1 1)) (y-of (curve1 1)) curve2)))

(define (gosper-step curve)
  (let*([curve1 (rotate-around-origin (/ pi 4) curve)]
        [curve2 (rotate-around-origin (- (/ pi 4)) curve)]
        [curve3 (connect-ends curve1 curve2)])
    (put-in-standard-position curve3)))

(define (gosper-step-general curve ang)
  (let*([curve1 (rotate-around-origin ang curve)]
        [curve2 (rotate-around-origin (- ang) curve)]
        [curve3 (connect-ends curve1 curve2)])
    (put-in-standard-position curve3)))

(define (gosper-curve-loop level)
  (repeated gosper-step level))

(define (gosper-curve level)
  ((gosper-curve-loop level) (unit-line)))

(define (calc-angle level)
    (if (= level 0) (/ pi 4)
        (- (/ pi 4) (/ (/ pi 4) (expt level 2)))))

(define (gosper-curve-general curve calc-angle level)
  (if (= level 0) curve
      (gosper-step-general (gosper-curve-general curve calc-angle (- level 1)) (calc-angle level))))

(define (koch-step curve)
  (let*([curve1 (rotate-around-origin (/ pi 3) curve)]
        [curve2 (rotate-around-origin (- (/ pi 3)) curve)]
        [curve3 (connect-ends curve curve1)]
        [curve4 (connect-ends curve2 curve)]
        [curve5 (connect-ends curve3 curve4)])
    (put-in-standard-position curve5)))

(define (koch-curve-loop level)
  (repeated koch-step level))

(define (koch-curve level)
   (make-tran ((koch-curve-loop level) (unit-line))))

(define (make-tran curve)
  (let*([curve1 (rotate-around-origin (/ pi 3) curve)]
        [curve2 (rotate-around-origin (- (/ pi 3)) curve)]
        [curve3 (connect-ends curve1 curve2)]
        [curve5 (rotate-around-origin pi curve)]
        [curve4 (connect-ends curve3 curve5)])
    curve4))

(define unit-triangle
  (let*([c1 (unit-line)]
        [c2 (rotate-around-origin (/ pi 3) c1)]
        [c3 (rotate-around-origin pi c1)]
        [c4 (translate 0.5 (/ (sqrt 3) 2) (rotate-around-origin (- (/ pi 3)) c1))]
        [c5 (connect-ends c4 c3)]
        [c6 (connect-ends c5 c2)])
    c6))

(define (sier-step curve)
  (let*([curve1 (scale 0.5 0.5 curve)]
        [curve2 (translate (* 2 (x-of (curve1 1))) 0 curve1)]
        [curve3 (translate (x-of (curve1 1)) (y-of (curve1 1)) curve1)]
        [curve4 (connect-rigidly curve3 curve1)]
        [curve5 (connect-rigidly curve2 curve3)]
        [curve6 (connect-rigidly curve4 curve5)])
    curve6))

(define (sier-curve-loop level)
  (repeated sier-step level))

(define (sierpinski-curve level)
   ((sier-curve-loop level) unit-triangle))



;; The main execution starts from here

(draw (vertical-line (make-point 0.5 0.5) 2))

(draw (reflect-through-y-axis (vertical-line (make-point 0.5 0.5) 2)))
(draw (reflect-through-y-axis (unit-circle)))

(draw (translate 0.5 0.5  (reflect-through-y-axis
                              (vertical-line (make-point 0.5 0.5) 2))))
(draw (translate 0.5 -0.5 (reflect-through-y-axis (unit-circle))))

(draw (scale 2 0.5 (reflect-through-y-axis
                        (vertical-line (make-point 0.5 0.5) 2))))
(draw (scale 0.2 -0.5 (reflect-through-y-axis (unit-circle))))

(draw (rotate-around-origin (- (/ pi 4))
           (scale 2 0.5 (reflect-through-y-axis
                       (vertical-line (make-point 0.5 0.5) 2)))))
(draw (rotate-around-origin (/ pi 4)
           (scale 0.2 -0.5 (reflect-through-y-axis (unit-circle)))))

(draw (put-in-standard-position
          (rotate-around-origin (- (/ pi 4))
        (scale 2 0.5
           (reflect-through-y-axis
       (vertical-line (make-point 0.5 0.5) 2))))))
(draw (put-in-standard-position
          (scale 0.2 -0.5
        (reflect-through-y-axis (unit-circle)))))

(draw (connect-rigidly
       (put-in-standard-position
        (rotate-around-origin (- (/ pi 4))
                              (scale 2 0.5
                                     (reflect-through-y-axis
                                      (vertical-line
                                       (make-point 0.5 0.5) 2)))))
       (scale 0.2 -0.5 (reflect-through-y-axis
                        (unit-circle)))))

(draw (connect-ends
       (put-in-standard-position
        (rotate-around-origin (- (/ pi 4))
                              (scale 2 0.5
                                     (reflect-through-y-axis
                                      (vertical-line
                                       (make-point 0.5 0.5) 2)))))
       (scale 0.2 -0.5 (reflect-through-y-axis
                        (unit-circle)))))


(draw (gosper-curve 1))
(draw (gosper-curve 4))
(draw (gosper-curve 8))
  
(draw (gosper-curve-general
          (put-in-standard-position (unit-semi-circle))
    calc-angle
    8))
(draw (gosper-curve-general (unit-line) calc-angle 8))
(draw (gosper-curve-general
          (put-in-standard-position (unit-semi-circle))
    calc-angle
    32))
(draw (gosper-curve-general (unit-line) calc-angle 32))

(draw (koch-curve  2))
(draw (koch-curve  4))
(draw (koch-curve  8))

(draw (sierpinski-curve 2))
(draw (sierpinski-curve 4)) 
(draw (sierpinski-curve 8))
(draw (sierpinski-curve 32))
(draw (gosper-curve-general
        (sierpinski-curve 4)
  calc-angle
  32))
